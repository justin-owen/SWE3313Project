@inject CartService CartService
@inject CartStateService CartStateService
@inject NavigationManager Navigation
@inject Authenticator Authenticator
@inject DataService DataService
@rendermode InteractiveServer

<nav class="navbar navbar-expand-lg fixed-top bg-grey border" height="">
    
    <div class="d-flex justify-content-between align-items-center" style="height: 100%; width: 100%">
        <div class="d-flex align-items-center gap-3 h-100">
            <img src="/images/Raster.png" style="max-height: 120%; height: auto;" alt="Raster Image"/>
            <h1 style="font-family: Norwester, Arial, sans-serif">Lucky's Cars</h1>
        </div>
        <div class="d-flex gap-3 h-100 me-2">
            @if (IsAdmin)
            {
                <NavLink href="/SalesReport">
                    <img src="/images/Report-Icon.png" style="max-height: 90%;height: auto" alt="Sales-Report-Icon"/>
                </NavLink>
                <NavLink href="/UserList">
                    <img src="/images/User-List-Icon.png" style="max-height: 90%; height:  auto" alt="User-List-Icon"/>
                </NavLink>
            }
            <NavLink href="/Inventory">
                <img src="/images/Home-Icon.png" style="max-height: 90%; height: auto" alt="Home-Icon"/>
            </NavLink>


            @if (HasCart)
            {
                <NavLink href="/Cart">
                    <img src="/images/Cart-Icon.png" style="max-height: 90%; height: auto;" alt="Cart-Icon"/>
                </NavLink>
            }
            else
            {
                <img src="/images/Cart-Icon.png" style="max-height: 90%; height: auto; opacity: 0.5;" alt="Cart-Icon"/>
            }

            <NavLink href="/Profile">
                <img src="/images/Profile-Icon.png" style="max-height: 90%; height: auto" alt="Profile-Icon"/>
            </NavLink>


        </div>
    </div>

</nav>
@code {
    private bool HasCart = false;
    private bool isSubscribed = false;
    private bool IsAdmin = false; 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isSubscribed)
        {
            CartStateService.OnChange += UpdateCartStatus;
            isSubscribed = true;

            Console.WriteLine("[DEBUG] NavMenu subscribed to CartStateService.OnChange");


            var authState = await Authenticator.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                var cart = await CartService.GetCurrentCartAsync();
                if (cart != null && cart.Items.Any())
                {
                    Console.WriteLine("[DEBUG] NavMenu found existing cart on startup.");
                    CartStateService.SetCartStatus(true);
                }
                
                var userId = await Authenticator.GetCurrentUserIdAsync();
                if (userId.HasValue)
                {
                    var dbUser = await DataService.GetUserById(userId.Value);
                    IsAdmin = dbUser?.IsAdmin == 1;

                    Console.WriteLine($"[DEBUG] User IsAdmin = {IsAdmin}");
                }
            }

            HasCart = CartStateService.HasCart;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void UpdateCartStatus()
    {
        Console.WriteLine($"[DEBUG] UpdateCartStatus fired! HasCart now: {CartStateService.HasCart}");
        HasCart = CartStateService.HasCart;
        InvokeAsync(StateHasChanged);
    }

    private string GetCartStyle()
    {
        Console.WriteLine($"[DEBUG] GetCartStyle called. HasCart = {HasCart}");
        return $"pointer-events: {(HasCart ? "auto" : "none")}; opacity: {(HasCart ? "1" : "0.5")};";
    }

    public void Dispose()
    {
        if (isSubscribed)
        {
            CartStateService.OnChange -= UpdateCartStatus;
            Console.WriteLine("[DEBUG] NavMenu unsubscribed from CartStateService.OnChange");
        }
    }
}