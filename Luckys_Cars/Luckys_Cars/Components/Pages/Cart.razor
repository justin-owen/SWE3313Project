@page "/Cart"
@layout MainLayout
@attribute [Authorize]
@using Luckys_Cars.Models
@inject NavigationManager Navigation
@inject CartService CartService
@inject CartStateService CartStateService
@inject DataService DataService
@inject Authenticator Authenticator

@rendermode InteractiveServer
<style>
    body {
        background-color: #0b1c2c;
        color: white;
        margin: 0;
        padding: 0;
        height: 100vh;
        justify-content: center;
        align-items: center;
    }
</style>
<div style="height: 10vh;"></div>
<h1 class="text-center" style="color: #425163FF; font-family: Norwester, Arial, sans-serif">Summary</h1>
@if (IsLoading)
{
    <div class="text-center mt-5">
        <h4>Loading your cart...</h4>
    </div>
}
else if (Sale == null || !Sale.Items.Any())
{
    <div class="text-center mt-5">
        <h4>Your cart is empty.</h4>
        <button class="btn btn-primary mt-3" @onclick="GoToInventory">Browse Cars</button>
    </div>
}
else
{
    <div class="container-fluid py-5 d-flex justify-content-center">
    <div class="bg-primary border rounded p-4" style="max-width: 1200px; width: 100%;">
    <div class="row g-5 m-0 justify-content-center align-items-center">
        <div class="row g-5 m-0 justify-content-center align-items-center">

            <!-- Left: Car Display Column -->
            <div class="col-md-6">
                <!-- Carousel Display -->
                <div class="position-relative mb-3" style="height: 300px;">
                    @for (int i = 0; i < Sale.Items.Count; i++)
                    {
                        var car = Sale.Items[i];
                        var imageSrc = PrimaryPhotos.TryGetValue(car.ItemId, out var src) ? src : "/images/no-image.png";

                        <div class="position-absolute top-0 start-0 w-100 h-100 @(i == CurrentCarouselIndex ? "" : "d-none")">
                            <img src="@imageSrc"
                                 class="w-100 h-100 rounded"
                                 style="object-fit: contain;"
                                 alt="Car Image" />
                            <div class="mt-2 bg-grey border rounded text-center text-white">
                                <strong>@car.Year @car.Make @car.Model</strong><br />
                                <span>@((car.Cost / 100.0m).ToString("C0"))</span>
                            </div>
                        </div>
                    }

                    <button class="btn btn-dark position-absolute top-50 start-0 translate-middle-y z-1" @onclick="PreviousSlide">
                        <span class="carousel-control-prev-icon"></span>
                    </button>
                    <button class="btn btn-dark position-absolute top-50 end-0 translate-middle-y z-1" @onclick="NextSlide">
                        <span class="carousel-control-next-icon"></span>
                    </button>
                </div>
            </div>

            <!-- Right: Summary + Checkout -->
            <div class="col-md-6">
                <div class="summary-box h-100 d-flex flex-column">
                    <h5 class="text-uppercase">Summary</h5>
                    <div class="flex-grow-1 overflow-auto border rounded p-2 mb-3" style="max-height: 250px; background-color: #132c44;">
                        @foreach (var item in Sale.Items)
                        {
                            <div class="d-flex justify-content-between align-items-center border-bottom pb-2 mb-2">
                                <div>
                                    <strong>@item.Make @item.Model</strong><br />
                                    <small style="color: white">@item.Year</small>
                                </div>

                                <div class="d-flex flex-column align-items-end">
                                    <div class="fw-bold text-light">
                                        @((item.Cost / 100.0m).ToString("C0"))
                                    </div>
                                    <button class="btn btn-sm btn-outline-danger mt-1" @onclick="()=>RemoveFromCart(item.ItemId)">Remove</button>
                                </div>
                            </div>
                        }
                    </div>
                    <p>Subtotal: @((Sale.Items.Sum(i => i.Cost) / 100).ToString("N0"))</p>
                    <p>Delivery & Fees: 2000</p>
                    <p>Tax: 234.32</p>
                    <p class="total mt-3">TOTAL: @(((Sale.Items.Sum(i => i.Cost) + 2000 + 23432) / 100.0m).ToString("N2"))</p>
                    <button class="btn w-100 mt-3" style="background-color: darkgreen" @onclick="Checkout">Checkout</button>
                </div>
            </div>
        </div>

    </div>
    </div>
    </div>
}

@code {
    private Sale_Model? Sale;
    private Dictionary<int, string> PrimaryPhotos = new();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        Sale = await CartService.GetCurrentSaleAsync();

        if (Sale == null)
        {
            Console.WriteLine("DEBUG: Sale is null!");
        }
        else
        {
            Console.WriteLine($"DEBUG: Sale ID = {Sale.SaleId}, Item count = {Sale.Items.Count}");
        }

        if (Sale != null && Sale.Items.Any())
        {
            foreach (var item in Sale.Items)
            {
                var photoModel = await DataService.GetPrimaryPhoto(item.ItemId);
                if (photoModel != null && photoModel.ImageData != null && photoModel.ImageData.Length > 0)
                {
                    PrimaryPhotos[item.ItemId] = $"data:image/png;base64,{Convert.ToBase64String(photoModel.ImageData)}";
                }
                else
                {
                    PrimaryPhotos[item.ItemId] = "/images/no-image.png";
                }
            }
        }

        IsLoading = false;
    }


    private async Task Checkout()
    {
        if (Sale != null)
        {
            await CartService.CompleteSaleAsync(Sale.SaleId);
            Navigation.NavigateTo("/Inventory");
        }
    }

    private void GoToInventory()
    {
        Navigation.NavigateTo("/Inventory");
    }
    private async Task RemoveFromCart(int itemId)
    {
        Console.WriteLine($"[DEBUG] RemoveFromCart called for ItemId={itemId}");

        bool result = await CartService.RemoveItemFromCartAsync(itemId);
        Console.WriteLine("[DEBUG] RemoveItemFromCartAsync completed.");

        if (result)
        {
            // Reload updated sale
            Sale = await CartService.GetCurrentSaleAsync();

            if (Sale == null || !Sale.Items.Any())
            {
                Console.WriteLine("[DEBUG] Reloaded Sale is null after removal.");
                CartStateService.SetCartStatus(false);
                
                Navigation.NavigateTo("/Inventory");
                return;
            }
            else
            {
                Console.WriteLine($"[DEBUG] Reloaded SaleId={Sale.SaleId}, Items.Count={Sale.Items.Count}");
            }

            // Rebuild image dictionary
            PrimaryPhotos.Clear();
            if (Sale?.Items != null)
            {
                foreach (var item in Sale.Items)
                {
                    var photoModel = await DataService.GetPrimaryPhoto(item.ItemId);
                    if (photoModel != null && photoModel.ImageData?.Length > 0)
                    {
                        PrimaryPhotos[item.ItemId] = $"data:image/png;base64,{Convert.ToBase64String(photoModel.ImageData)}";
                    }
                    else
                    {
                        PrimaryPhotos[item.ItemId] = "/images/no-image.png";
                    }
                }
            }

            Console.WriteLine($"[DEBUG] PrimaryPhotos rebuilt: {PrimaryPhotos.Count} photos loaded.");

            StateHasChanged();
            Console.WriteLine("[DEBUG] StateHasChanged called, UI should update.");
        }
        else
        {
            Console.WriteLine("[DEBUG] Failed to remove item from cart.");
        }
        
    }
    private int CurrentCarouselIndex = 0;

    private void PreviousSlide()
    {
        if (Sale != null && Sale.Items.Count > 0)
        {
            CurrentCarouselIndex = (CurrentCarouselIndex - 1 + Sale.Items.Count) % Sale.Items.Count;
        }
    }

    private void NextSlide()
    {
        if (Sale != null && Sale.Items.Count > 0)
        {
            CurrentCarouselIndex = (CurrentCarouselIndex + 1) % Sale.Items.Count;
        }
    }


}
