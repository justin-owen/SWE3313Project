@page "/Cart"
@layout MainLayout
@attribute [Authorize]
@using Luckys_Cars.Models
@inject NavigationManager Navigation
@inject CartService CartService
@inject DataService DataService
@inject Authenticator Authenticator

@rendermode InteractiveServer
<style>
    body {
        background-color: #0b1c2c;
        color: white;
        margin: 0;
        padding: 0;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>
<div style="height: 10vh;"></div>
@if (IsLoading)
{
    <div class="text-center mt-5">
        <h4>Loading your cart...</h4>
    </div>
}
else if (Sale == null || !Sale.Items.Any())
{
    <div class="text-center mt-5">
        <h4>Your cart is empty.</h4>
        <button class="btn btn-primary mt-3" @onclick="GoToInventory">Browse Cars</button>
    </div>
}
else
{
    <div class="bg-primary container-fluid d-flex justify-content-center align-items-center py-4 rounded border g-2">
        <div class="row g-5 m-0 justify-content-center align-items-center">
            <!-- Left: Car Display -->
            <div class="col-md-6 text-center justify-content-center " style="max-width: 400px">
                @{
                    var car = Sale.Items[CurrentCarouselIndex];
                    var imageSrc = PrimaryPhotos.TryGetValue(car.ItemId, out var src) ? src : "/images/no-image.png";
                }
                <img src="@imageSrc" class="img-fluid mb-3 border" style="max-height: 300px; object-fit: contain; border-radius: 10px;" alt="Car Image" />
                <div class="bg-grey text-white p-3 rounded text-start row" style="color: white">
                    <strong>@car.Year @car.Make @car.Model</strong><br />
                    <span>Price: @((car.Cost / 100).ToString("C0"))</span><br />
                    <span>Features: @car.Features</span>
                </div>
            </div>

            <!-- Right: Summary + Checkout -->
            <div class="col-md-6">
                <div class="summary-box h-100 d-flex flex-column">
                    <h5 class="text-uppercase">Summary</h5>
                    <div class="flex-grow-1 overflow-auto border rounded p-2 mb-3" style="max-height: 250px; background-color: #132c44;">
                        @foreach (var item in Sale.Items)
                        {
                            <div class="d-flex justify-content-between align-items-center border-bottom pb-2 mb-2">
                                <div>
                                    <strong>@item.Make @item.Model</strong><br />
                                    <small style="color: white">@item.Year</small>
                                </div>

                                <div class="d-flex flex-column align-items-end">
                                    <div class="fw-bold text-light">
                                        @((item.Cost / 100.0m).ToString("C0"))
                                    </div>
                                    <button class="btn btn-sm btn-outline-danger mt-1" @onclick="()=>RemoveFromCart(item.ItemId)">Remove</button>
                                </div>
                            </div>
                        }
                    </div>
                    <p>Subtotal: @((Sale.Items.Sum(i => i.Cost) / 100).ToString("N0"))</p>
                    <p>Delivery & Fees: 2000</p>
                    <p>Tax: 234.32</p>
                    <p class="total mt-3">TOTAL: @(((Sale.Items.Sum(i => i.Cost) + 2000 + 23432) / 100.0m).ToString("N2"))</p>
                    <button class="btn w-100 mt-3" style="background-color: darkgreen" @onclick="Checkout">Checkout</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private Sale_Model? Sale;
    private Dictionary<int, string> PrimaryPhotos = new();
    private bool IsLoading = true;
    private int CurrentCarouselIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        Sale = await CartService.GetCurrentSaleAsync();

        if (Sale == null)
        {
            Console.WriteLine("DEBUG: Sale is null!");
        }
        else
        {
            Console.WriteLine($"DEBUG: Sale ID = {Sale.SaleId}, Item count = {Sale.Items.Count}");
        }

        if (Sale != null && Sale.Items.Any())
        {
            foreach (var item in Sale.Items)
            {
                var photoModel = await DataService.GetPrimaryPhoto(item.ItemId);
                if (photoModel != null && photoModel.ImageData != null && photoModel.ImageData.Length > 0)
                {
                    PrimaryPhotos[item.ItemId] = $"data:image/png;base64,{Convert.ToBase64String(photoModel.ImageData)}";
                }
                else
                {
                    PrimaryPhotos[item.ItemId] = "/images/no-image.png";
                }
            }
        }

        IsLoading = false;
    }


    private async Task Checkout()
    {
        if (Sale != null)
        {
            await CartService.CompleteSaleAsync(Sale.SaleId);
            Navigation.NavigateTo("/Inventory");
        }
    }

    private void GoToInventory()
    {
        Navigation.NavigateTo("/Inventory");
    }
    private async Task RemoveFromCart(int itemId)
    {
        Console.WriteLine($"[DEBUG] RemoveFromCart called for ItemId={itemId}");

        bool result = await CartService.RemoveItemFromCartAsync(itemId);
        Console.WriteLine("[DEBUG] RemoveItemFromCartAsync completed.");

        if (result)
        {
            // Reload updated sale
            Sale = await CartService.GetCurrentSaleAsync();

            if (Sale == null)
            {
                Console.WriteLine("[DEBUG] Reloaded Sale is null after removal.");
            }
            else
            {
                Console.WriteLine($"[DEBUG] Reloaded SaleId={Sale.SaleId}, Items.Count={Sale.Items.Count}");
            }

            // Rebuild image dictionary
            PrimaryPhotos.Clear();
            if (Sale?.Items != null)
            {
                foreach (var item in Sale.Items)
                {
                    var photoModel = await DataService.GetPrimaryPhoto(item.ItemId);
                    if (photoModel != null && photoModel.ImageData?.Length > 0)
                    {
                        PrimaryPhotos[item.ItemId] = $"data:image/png;base64,{Convert.ToBase64String(photoModel.ImageData)}";
                    }
                    else
                    {
                        PrimaryPhotos[item.ItemId] = "/images/no-image.png";
                    }
                }
            }

            Console.WriteLine($"[DEBUG] PrimaryPhotos rebuilt: {PrimaryPhotos.Count} photos loaded.");

            StateHasChanged();
            Console.WriteLine("[DEBUG] StateHasChanged called, UI should update.");
        }
        else
        {
            Console.WriteLine("[DEBUG] Failed to remove item from cart.");
        }
    }


}
